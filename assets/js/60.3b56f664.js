(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{146:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_7-3-stashing-and-cleaning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-stashing-and-cleaning","aria-hidden":"true"}},[t._v("#")]),t._v(" 7.3 Stashing and Cleaning")]),t._v(" "),a("h2",{attrs:{id:"git-stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash","aria-hidden":"true"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("应该即用即清理，不然很多stash很难记得当时为什么stash")])]),t._v(" "),a("li",[a("p",[t._v("stash apply | pop 条件")])])]),t._v(" "),a("ul",[a("li",[t._v("可以将stash应用到任意分支")]),t._v(" "),a("li",[t._v("分支中包含已修改或未提交文件也可以应用stash")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 场景：切换分支又有未提交内容时非常有用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将未提交的内容(包括未add和未commit得)推入一个栈中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看栈中的stash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用栈中的某个stash，默认为最近的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只应用，不删除stash记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# apply将stash之前不管是staged或unstaged都恢复成staged")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 具体见下文bash示例，单个文件的更改使用这个比较有用，一个文件git add之后又修改了内容，git stash之后，如果应用git stash apply，那么应用出的是再次修改的版本，不过，状态变为staged，如果加上--index则会完整保留unstaged和staged的内容的状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加上--index，会按照stash之前状态apply")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply --index\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用stash记录，并从栈中删除，默认为最近的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# === git stash apply + git stash drop")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除栈中的一条stash记录，默认为最近的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只stash unstaged files")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash --keep-index\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将stash生成一个分支，应用成功，则丢弃掉这一条stash记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("new branch name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h2",{attrs:{id:"清理工作目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清理工作目录","aria-hidden":"true"}},[t._v("#")]),t._v(" 清理工作目录")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# !永久删除不包含在.gitignore中但未被跟踪或空文件夹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 效果与git clean相同，不过会生成一个stash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash --all\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git clean 详细参数git clean --help查看")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -d  git clean只remove files，加上-d就加上了文件夹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -n Don’t actually remove anything, just show what would be done.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -d -n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -x .gitignore中的也要删除，应该极小几率用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -d -n -x\n")])])]),a("h2",{attrs:{id:"bash示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bash示例","aria-hidden":"true"}},[t._v("#")]),t._v(" bash示例")]),t._v(" "),a("h3",{attrs:{id:"git-stash-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-list","aria-hidden":"true"}},[t._v("#")]),t._v(" git stash list")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\nstash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": WIP on mobile-dev: 8ea730c5 xx\nstash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": WIP on mobile-dev: 134ba61a 去除xx\nstash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": WIP on mobile-dev: 134ba61a 去除xx\n")])])]),a("h3",{attrs:{id:"git-stash-apply-与-git-stash-apply-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-apply-与-git-stash-apply-index","aria-hidden":"true"}},[t._v("#")]),t._v(" git stash apply 与 git stash apply --index")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stash之前")]),t._v("\n$ gst\nOn branch mobile-dev\nChanges to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git reset HEAD <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        new file:   abc.txt\n\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout -- <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        modified:   abc.txt\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\nSaved working directory and index state WIP on mobile-dev: f46a2deb bugfix\n\n--CASE 1----------------------------------------------\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保存了add前后两次文件修改内容")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply --index\nOn branch mobile-dev\nChanges to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git reset HEAD <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        new file:   abc.txt\n\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout -- <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        modified:   abc.txt\n\n--CASE 2----------------------------------------------\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 未add的修改被add并应用出来")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply\nOn branch mobile-dev\nChanges to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git reset HEAD <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        new file:   abc.txt\n")])])]),a("h3",{attrs:{id:"git-clean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-clean","aria-hidden":"true"}},[t._v("#")]),t._v(" git clean")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# only flies")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -n\nWould remove a.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加上了untracked directories")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -n -d\nWould remove .vscode/\nWould remove a.txt\n")])])])])},[],!1,null,null,null);s.default=e.exports}}]);